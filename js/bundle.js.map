{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://footproject/./js/modules/modal.js","webpack://footproject/./js/script.js","webpack://footproject/./js/modules/tabs.js","webpack://footproject/./js/modules/timer.js","webpack://footproject/./js/modules/cards.js","webpack://footproject/./js/modules/slider.js","webpack://footproject/./js/modules/forms.js","webpack://footproject/./js/modules/services/services.js","webpack://footproject/./js/modules/calc.js"],"sourcesContent":["function openModal(modalSelector, modalTimerId) {\r\n  const modal = document.querySelector(modalSelector);\r\n  modal.classList.add('show');\r\n  modal.classList.remove('hide');\r\n  document.body.style.overflow = 'hidden';\r\n\r\n  if (modalTimerId) {\r\n    clearInterval(modalTimerId);\r\n  }\r\n}\r\n\r\nfunction closeModal(modalSelector) {\r\n  const modal = document.querySelector(modalSelector);\r\n  modal.classList.add('hide');\r\n  modal.classList.remove('show');\r\n  document.body.style.overflow = '';\r\n}\r\n\r\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\r\n  // Modal\r\n\r\n  const modalTrigger = document.querySelectorAll(triggerSelector);\r\n  const modal = document.querySelector(modalSelector);\r\n\r\n  modalTrigger.forEach((btn) => {\r\n    btn.addEventListener('click', () => openModal(modalSelector, modalTimerId));\r\n  });\r\n\r\n  modal.addEventListener('click', (evt) => {\r\n    if (evt.target === modal || evt.target.className === 'modal__close') {\r\n      closeModal(modalSelector);\r\n    }\r\n  });\r\n\r\n  document.addEventListener('keydown', (evt) => {\r\n    if (evt.code === 'Escape' && modal.classList.contains('show')) {\r\n      closeModal(modalSelector);\r\n    }\r\n  });\r\n\r\n  // Если пользователь долистал страницу до низа, модальное окно должно открыться\r\n  function showModalByScroll() {\r\n    if (\r\n      // Общую сумму проскроленных пикселей сверху вниз и видимого окружения сравниваем с общим количеством высоты скролла -1px\r\n      window.pageYOffset + document.documentElement.clientHeight >=\r\n      document.documentElement.scrollHeight - 1\r\n    ) {\r\n      openModal(modalSelector, modalTimerId);\r\n      // Удаляем обработчик после первого открытия модалки внизу сайта\r\n      window.removeEventListener('scroll', showModalByScroll);\r\n    }\r\n  }\r\n  // Добавляем обработчик событий scroll на всю страницу\r\n  window.addEventListener('scroll', showModalByScroll);\r\n}\r\n\r\nexport default modal;\r\nexport { openModal };\r\nexport { closeModal };\r\n","import modal from './modules/modal';\nimport tabs from './modules/tabs';\nimport timer from './modules/timer';\nimport cards from './modules/cards';\nimport slider from './modules/slider';\nimport forms from './modules/forms';\nimport calc from './modules/calc';\nimport { openModal } from './modules/modal';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const modalTimerId = setTimeout(\n    () => openModal('.modal', modalTimerId),\n    50000\n  );\n\n  modal('[data-modal]', '.modal', modalTimerId);\n  tabs(\n    '.tabheader__items',\n    '.tabcontent',\n    '.tabheader__item',\n    'tabheader__item_active'\n  );\n  timer('.timer', '2023-04-29');\n  cards();\n  slider({\n    container: '.offer__slider',\n    slide: '.offer__slide',\n    prevArrow: '.offer__slider-prev',\n    nextArrow: '.offer__slider-next',\n    totalCounter: '#total',\n    currentCounter: '#current',\n    wrapper: '.offer__slider-wrapper',\n    field: '.offer__slider-inner',\n  });\n  forms('form', modalTimerId);\n  calc();\n});\n","function tabs(\r\n  tabsSelector,\r\n  tabsContentSelector,\r\n  tabsItemSelector,\r\n  activeClass\r\n) {\r\n  // / ТАБЫ\r\n  // Есть три глобальные задачи...\r\n  // 1) Скрывать ТАБЫ\r\n  // 2) Показать нужный таб\r\n  // 3) Повесить обработчик событий на меню\r\n  // Действия\r\n  // 1) Дать глобальный обработчик событий document.DOMContentLoader\r\n  // 2) Создать переменные для баннера слева от списка табов, родителя табов, и самих табов\r\n  // 3) Есть активный таб (выделяется жирным шрифтом)\r\n  // 1) Создать функцию для скрытия контента + создать класс для скрытия\r\n  // 2) добавить класс скрытия и убрать класс показа + удалить класс анимации\r\n  // 3) Добавить доп функционал в ^ функцию (скрыть активный элемент контента)\r\n  // 1) Создаем функцию, которая будет показывать табы с параметром по умолчанию + активный элемент + создать класс для показа\r\n  // 2) добавить класс показа + анимации и убрать класс скрытия\r\n  // 2)\r\n  // 3) Вешаем обработчик событий на родителя табов (делегирование)\r\n  // класс для анимации\r\n  // .fade{animation-name: fade;animation-duration: 1.5s;}@keyframes fade{from{opacity: 0.1;}to{opacity: 1;}}\r\n\r\n  const tabsWrapper = document.querySelector(tabsSelector);\r\n  const tabContent = document.querySelectorAll(tabsContentSelector);\r\n  const tabItems = document.querySelectorAll(tabsItemSelector);\r\n\r\n  function hideTabContent() {\r\n    tabContent.forEach((item) => {\r\n      item.classList.add('hide');\r\n      item.classList.remove('show', 'fade');\r\n    });\r\n\r\n    tabItems.forEach((item) => {\r\n      item.classList.remove(activeClass);\r\n    });\r\n  }\r\n\r\n  function showTabContent(i = 0) {\r\n    tabContent[i].classList.add('show', 'fade');\r\n    tabContent[i].classList.remove('hide');\r\n    tabItems[i].classList.add(activeClass);\r\n  }\r\n\r\n  hideTabContent();\r\n  showTabContent();\r\n\r\n  tabsWrapper.addEventListener('click', (evt) => {\r\n    let target = evt.target;\r\n    if (target && target.classList.contains(tabsItemSelector.slice(1))) {\r\n      tabItems.forEach((item, i) => {\r\n        if (target == item) {\r\n          hideTabContent();\r\n          showTabContent(i);\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport default tabs;\r\n","function timer(id, deadline) {\r\n  // ТАЙМЕР ОБРАТНОГО ОТСЧЕТА\r\n  // ДЕЙСТВИЯ\r\n  // 1) Создать функцию, которая будет устанавливать таймер\r\n  // 2) Функция разницы между временем\r\n  // 3) Функция для обновления таймера\r\n\r\n  // Функция, которая будет опеределять разницу между deadline и нашим текущим временем\r\n  function getTimeRemaining(endtime) {\r\n    let days, hours, minutes, seconds;\r\n    // Получим миллисекунды в строке и переведем в цифры. В итоге получим разницу времени\r\n    // Так как значени придет в строке, необходимо перевести данные в цифры для вычисления\r\n    // От кол-ва миллисекунд в конечном времени отнимаем нашу текущую дату в миллисекундах\r\n    const t = Date.parse(endtime) - Date.parse(new Date());\r\n    // ^ Получаем разницу в миллисекундах. Теперь это значение необходимо перевести в дни, часы, минуты, секунды\r\n    // Получаем дни (округляем до ближайшего целого числа)\r\n    // Проверим, прошедшая это дата или нет\r\n    if (t <= 0) {\r\n      // Если дата прошедшая - выводим нули\r\n      days = 0;\r\n      hours = 0;\r\n      minutes = 0;\r\n      seconds = 0;\r\n    } else {\r\n      // Делим миллисекунды из t на кол-во миллисекунд в сутках. Получаем сколько суток осталось до окончания даты deadline\r\n      days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n      // Получаем часы. Общее кол-во миллисекунд (разницу (t)) / на кол-во миллисекунд в часе\r\n      hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n      // Минуты (кол-во секунд / 60 и оплучаем кол-во минут)\r\n      minutes = Math.floor((t / 1000 / 60) % 60);\r\n      // Секунды\r\n      seconds = Math.floor((t / 1000) % 60);\r\n    }\r\n\r\n    // Возвращаем объект с временем (дни, часы, минуты, секунды)\r\n    return {\r\n      total: t,\r\n      days,\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n    };\r\n  }\r\n\r\n  // Функция-помощник для вставки 0 во время на странице\r\n  function getZero(num) {\r\n    if (num >= 0 && num < 10) {\r\n      return `0${num}`;\r\n    } else {\r\n      return num;\r\n    }\r\n  }\r\n\r\n  // Встраиваем наш таймер на страницу (в html)\r\n  function setClock(selector, endtime) {\r\n    // Находим элементы на странице\r\n    const timer = document.querySelector(selector);\r\n    const days = timer.querySelector('#days');\r\n    const hours = timer.querySelector('#hours');\r\n    const minutes = timer.querySelector('#minutes');\r\n    const seconds = timer.querySelector('#seconds');\r\n    // Запускаем функцию updateClock каждую секунду\r\n    const timeInterval = setInterval(updateClock, 1000);\r\n\r\n    // Вызываем функцию обновления таймера для моментального старта\r\n    updateClock();\r\n\r\n    // Функция, которая будет обновлять наш наймер на стр. каждую секунду\r\n    function updateClock() {\r\n      // Расчет того времени, который остался прямо на эту секунду.\r\n      // Будет возвращать объект функции getTimeRemaining (дату и время)\r\n      const t = getTimeRemaining(endtime);\r\n\r\n      // Расчетные величины помещаем на страницу (можно так же при помощи textContent)\r\n      // Обращамеся к свойствам объекта из функции getTimeRemaining (вызов функции мы присвоили переменной t)\r\n      days.innerHTML = getZero(t.days);\r\n      hours.innerHTML = getZero(t.hours);\r\n      minutes.innerHTML = getZero(t.minutes);\r\n      seconds.innerHTML = getZero(t.seconds);\r\n\r\n      // Если время вышло, останавливаем таймер (timeInterval)\r\n      if (t.total <= 0) {\r\n        clearInterval(timeInterval);\r\n      }\r\n    }\r\n  }\r\n\r\n  setClock(id, deadline);\r\n}\r\n\r\nexport default timer;\r\n","import { getResource } from './services/services';\r\n\r\nfunction cards() {\r\n  // Карточки\r\n\r\n  // Шаблоны карточек Class\r\n  class MenuCard {\r\n    constructor(img, alt, title, descr, price, parentSelector, ...classes) {\r\n      this.img = img;\r\n      this.alt = alt;\r\n      this.title = title;\r\n      this.descr = descr;\r\n      this.price = price;\r\n      this.parentSelector = document.querySelector(parentSelector);\r\n      this.classes = classes;\r\n      this.transfer = 27;\r\n      this.changeMoney();\r\n    }\r\n\r\n    changeMoney() {\r\n      this.price = this.price * this.transfer;\r\n    }\r\n\r\n    render() {\r\n      const card = document.createElement('div');\r\n      if (this.classes.length === 0) {\r\n        this.card = 'menu__item';\r\n        card.classList.add(this.card);\r\n      } else {\r\n        this.classes.forEach((className) => card.classList.add(className));\r\n      }\r\n\r\n      card.innerHTML = `\r\n      <img src=${this.img} alt=${this.alt} />\r\n      <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n      <div class=\"menu__item-descr\">${this.descr}</div>\r\n      <div class=\"menu__item-divider\"></div>\r\n      <div class=\"menu__item-price\">\r\n        <div class=\"menu__item-cost\">Цена:</div>\r\n        <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n      </div>\r\n      `;\r\n      this.parentSelector.append(card);\r\n    }\r\n  }\r\n\r\n  // Используем Promise для получения карточек с сервера\r\n  // getResource('http://localhost:3000/menu')\r\n  //   // Принимаем данные (объект)\r\n  //   .then((data) => {\r\n  //     // Так-как нам придет массив карточек, переберем их и сделаем с ними действимя\r\n  //     // Вызываем функцию/класс для создания карточек, вместо передачи параметров (obj.image, obj.alt и тд.) передаем деструктуризацию\r\n  //     data.forEach(({ img, alt, title, descr, price }) => {\r\n  //       new MenuCard(\r\n  //         img,\r\n  //         alt,\r\n  //         title,\r\n  //         descr,\r\n  //         price,\r\n  //         '.menu .container'\r\n  //       ).render();\r\n  //     });\r\n  //   });\r\n\r\n  // Получение карточек при помощи библиотеки axios\r\n  axios.get('http://localhost:3000/menu').then((data) => {\r\n    data.data.forEach(({ img, alt, title, descr, price }) => {\r\n      new MenuCard(img, alt, title, descr, price, '.menu .container').render();\r\n    });\r\n  });\r\n\r\n  // ИЛИ без использования классов (без шаблонизации), создавая верстку на лету\r\n\r\n  // getResource('http://localhost:3000/menu').then((data) => creaeteCard(data));\r\n\r\n  // function creaeteCard(data) {\r\n  //   data.forEach(({ img, alt, title, descr, price }) => {\r\n  //     const element = document.createElement('div');\r\n  //     price *= 27;\r\n  //     element.classList.add('menu__item');\r\n  //     element.innerHTML = `\r\n  //       <img src=${img} alt=${alt} />\r\n  //       <h3 class=\"menu__item-subtitle\">${title}</h3>\r\n  //       <div class=\"menu__item-descr\">${descr}</div>\r\n  //       <div class=\"menu__item-divider\"></div>\r\n  //       <div class=\"menu__item-price\">\r\n  //         <div class=\"menu__item-cost\">Цена:</div>\r\n  //         <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\r\n  //       </div>\r\n  //       `;\r\n  //     document.querySelector('.menu .container').append(element);\r\n  //   });\r\n  // }\r\n}\r\n\r\nexport default cards;\r\n","function slider({\r\n  container,\r\n  slide,\r\n  prevArrow,\r\n  nextArrow,\r\n  totalCounter,\r\n  currentCounter,\r\n  wrapper,\r\n  field,\r\n}) {\r\n  // Slider;\r\n  const slides = document.querySelectorAll(slide);\r\n  const slider = document.querySelector(container);\r\n  const prevSlideBtn = document.querySelector(prevArrow);\r\n  const nextSlideBtn = document.querySelector(nextArrow);\r\n  // Показывает на счетчеке текущий слайд\r\n  let currentSlideNum = document.querySelector(currentCounter);\r\n  // Показывает на счетчеке общее кол-во слайдов\r\n  let totalSlidesNum = document.querySelector(totalCounter);\r\n  // Номер слайдера\r\n  let slideCurrentIndex = 1;\r\n\r\n  // // Первый вариант\r\n  // showSlides(slideCurrentIndex);\r\n\r\n  // // Определяем общее кол-во слайдов и выводим счетчик\r\n  // if (slides.length < 10) {\r\n  //   totalSlidesNum.textContent = `0${slides.length}`;\r\n  // } else {\r\n  //   totalSlidesNum.textContent = slides.length;\r\n  // }\r\n\r\n  // function showSlides(n) {\r\n  //   // Если мы доходим до последнего слайда - возвращаемся на первый\r\n  //   if (n > slides.length) {\r\n  //     slideCurrentIndex = 1;\r\n  //   }\r\n  //   // Если мы на первом слайде и жмем стрелку <= - переходим на последний слайдер\r\n  //   if (n < 1) {\r\n  //     slideCurrentIndex = slides.length;\r\n  //   }\r\n  //   // Скрываем все слайдеры\r\n  //   slides.forEach((slide) => {\r\n  //     slide.style.display = 'none';\r\n  //   });\r\n\r\n  //   // Показываем нужный слайдер\r\n  //   slides[slideCurrentIndex - 1].style.display = 'block';\r\n\r\n  //   // Определяем текущий слайд и выводим счетчик\r\n  //   if (sliders.length < 10) {\r\n  //     currentSlideNum.textContent = `0${slideCurrentIndex}`;\r\n  //   } else {\r\n  //     currentSlideNum.textContent = slideCurrentIndex;\r\n  //   }\r\n  // }\r\n\r\n  // // Функция для изменения нашего slideCurrentIndex при переключении кнопками\r\n  // function plusSlideIndex(n) {\r\n  //   showSlides((slideCurrentIndex += n));\r\n  // }\r\n\r\n  // // При клике на <= вызывается функция слайдера и слайдер листается назад (от индекса slideCurrentIndex - 1)\r\n  // prevSlideBtn.addEventListener('click', () => {\r\n  //   plusSlideIndex(-1);\r\n  // });\r\n  // // При клике на => вызывается функция слайдера и слайдер листается вперед (к индексу slideCurrentIndex + 1)\r\n  // nextSlideBtn.addEventListener('click', () => {\r\n  //   plusSlideIndex(1);\r\n  // });\r\n\r\n  // Второй вариант СЛАЙДЕРА\r\n  // Окошко нашего слайдера, через который виден текущий слайд\r\n  const slidesWrapper = document.querySelector(wrapper);\r\n  // Обертка всех слайдов\r\n  const slidesField = document.querySelector(field);\r\n  // Ширина блока (окошка), через который мы видим текущий слайд (получаем из css)\r\n  const widthWindowSlide = window.getComputedStyle(slidesWrapper).width;\r\n  // Отступ для transform\r\n  let offset = 0;\r\n\r\n  // // Определяем общее кол-во слайдов и выводим счетчик\r\n  if (slides.length < 10) {\r\n    totalSlidesNum.textContent = `0${slides.length}`;\r\n    currentSlideNum.textContent = `0${slideCurrentIndex}`;\r\n  } else {\r\n    totalSlidesNum.textContent = slides.length;\r\n    currentSlideNum.textContent = slideCurrentIndex;\r\n  }\r\n\r\n  // Ограничиваем показ слайдов\r\n  slidesWrapper.style.overflow = 'hidden';\r\n  // Выстраиваем слайды в ряд\r\n  slidesField.style.display = 'flex';\r\n  // Выстраивает внутри себя все слайды в линию (Выстраиваем ширину блока, для того, что бы все слайды были в ряд)\r\n  // 100 * на количество слайдов\r\n  slidesField.style.width = 100 * slides.length + '%';\r\n  // Анимация при пролистывании\r\n  slidesField.style.transition = '0.5s all';\r\n  // Даем каждому слайду определенную ширину (Ширину окна, где мы видим текущий слайд)\r\n  slides.forEach((slide) => {\r\n    slide.style.width = widthWindowSlide;\r\n  });\r\n\r\n  // DOTS\r\n  // 1) Найти Секцию слайдера\r\n  // 2) Установить ему position: relative\r\n  // 3) Создаем обертку для точек\r\n  // 4) При помощи цикла создаем столько же точек, сколько и слайдов\r\n  // 5) Каждой точке устанавливаем атрибут\r\n  // 6) Создаем класс активности\r\n\r\n  slider.style.position = 'relative';\r\n  const carouselIndicators = document.createElement('ol');\r\n  const dots = [];\r\n  carouselIndicators.classList.add('carousel-indicators');\r\n  slider.append(carouselIndicators);\r\n  for (let i = 0; i < slides.length; i++) {\r\n    const dot = document.createElement('li');\r\n    // Назначаем каждой кнопке дата-атрибут, что бы обозначить каждую из них\r\n    dot.setAttribute('data-slide-to', i + 1);\r\n    dot.classList.add('dot');\r\n    // По умолчанию делаем первую кнопку ярче\r\n    if (i == 0) {\r\n      dot.style.opacity = 1;\r\n    }\r\n    carouselIndicators.append(dot);\r\n    dots.push(dot);\r\n  }\r\n\r\n  // ..................................................\r\n\r\n  // Индикатор текущего слайда\r\n  function indexCurrnetsSlide() {\r\n    if (slides.length < 10) {\r\n      currentSlideNum.textContent = `0${slideCurrentIndex}`;\r\n    } else {\r\n      currentSlideNum.textContent = slideCurrentIndex;\r\n    }\r\n  }\r\n\r\n  // Всем кнопкам (точкам) задаем полупрозрачность, а кнопке, которая показывает слайд даем полный окрас\r\n  function styleOpacityDots() {\r\n    dots.forEach((dot) => (dot.style.opacity = '0.5'));\r\n    dots[slideCurrentIndex - 1].style.opacity = 1;\r\n  }\r\n\r\n  const deleteNotDigits = (str) => +str.replace(/\\D/g, '');\r\n\r\n  nextSlideBtn.addEventListener('click', () => {\r\n    if (\r\n      // При клике предусматриваем вариант, когда мы доходим до последнего слайда, мы возвращаемся на первый\r\n      // +widthWindowSlide.replace(/\\D/g, '') * (slides.length - 1) Это расчет offset(translate) последнего слайда в slidesField\r\n      // Так же у widthWindowSlide вырезаем 'px', так как это у нас математическая операция, а значение widthWindowSlide записано в px\r\n      offset ==\r\n      deleteNotDigits(widthWindowSlide) * (slides.length - 1)\r\n    ) {\r\n      offset = 0;\r\n    } else {\r\n      // Если у нас не последний слайд то мы к offset добавляем ширину одного слайда. Тем самым переключаем слайд на другой\r\n      offset += deleteNotDigits(widthWindowSlide);\r\n    }\r\n    // На сколько и куда смещаем слайдер при клике\r\n    slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n    if (slideCurrentIndex == slides.length) {\r\n      slideCurrentIndex = 1;\r\n    } else {\r\n      slideCurrentIndex++;\r\n    }\r\n\r\n    // Индикатор текущего слайда\r\n    indexCurrnetsSlide();\r\n\r\n    styleOpacityDots();\r\n  });\r\n\r\n  prevSlideBtn.addEventListener('click', () => {\r\n    // Если мы на первом слайде, то возвращаемся на последний слайд\r\n    if (offset == 0) {\r\n      offset = deleteNotDigits(widthWindowSlide) * (slides.length - 1);\r\n    } else {\r\n      // Если это не первый слайд, мы отнимаем ширину слайда от offset\r\n      offset -= deleteNotDigits(widthWindowSlide);\r\n    }\r\n    // На сколько и куда смещаем слайдер при клике\r\n    slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n    if (slideCurrentIndex == 1) {\r\n      slideCurrentIndex = slides.length;\r\n    } else {\r\n      slideCurrentIndex--;\r\n    }\r\n\r\n    // Индикатор текущего слайда\r\n    indexCurrnetsSlide();\r\n\r\n    styleOpacityDots();\r\n  });\r\n\r\n  dots.forEach((dot) => {\r\n    dot.addEventListener('click', (e) => {\r\n      // Получаем дата атрибут кнопки, что бы определить какая именно была нажата\r\n      const slideTo = e.target.getAttribute('data-slide-to');\r\n\r\n      // Какой дата-атрибут, такой и индекс\r\n      slideCurrentIndex = slideTo;\r\n\r\n      offset = deleteNotDigits(widthWindowSlide) * (slideTo - 1);\r\n\r\n      slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n      // Индикатор текущего слайда\r\n      indexCurrnetsSlide();\r\n\r\n      styleOpacityDots();\r\n    });\r\n  });\r\n}\r\n\r\nexport default slider;\r\n","import { openModal } from './modal';\r\nimport { closeModal } from './modal';\r\nimport { postData } from './services/services';\r\n\r\nfunction forms(formSelector, modalTimerId) {\r\n  // Работа с сервером\r\n\r\n  // Forms\r\n  // Вариант со старым методом XMlHttpRequest\r\n  // const forms = document.querySelectorAll('form');\r\n  // const message = {\r\n  //   loading: 'img/form/spinner.svg',\r\n  //   success: 'Спасибо, мы скоро свяжемся с вами',\r\n  //   fail: 'Что-то пошло не так!',\r\n  // };\r\n\r\n  // // Присваиваем каждой форме функцию\r\n  // forms.forEach((item) => {\r\n  //   postData(item);\r\n  // });\r\n\r\n  // // Функция, отвечающая за постинг данных\r\n  // function postData(form) {\r\n  //   form.addEventListener('submit', (evt) => {\r\n  //     evt.preventDefault();\r\n\r\n  //     const statusMessage = document.createElement('img');\r\n  //     statusMessage.src = message.loading;\r\n  //     statusMessage.style.cssText = `\r\n  //       display: block;\r\n  //       margin: 0 auto;\r\n  //     `;\r\n  //     form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n  //     // Создаем объект request\r\n  //     const request = new XMLHttpRequest();\r\n  //     request.open('POST', 'server.php');\r\n  //     // Даем заголовок. НООООО!!! При связке XMLHttpRequest и FormData заголовок писать не нужно. Он формируется автоматически!\r\n  //     // ИНАЧЕ БУДЕТ ОШИБКА!!!\r\n  //     // Но если мы отправляем данные в формате JSON, тогда он необходим\r\n  //     request.setRequestHeader('Content-type', 'application/json');\r\n\r\n  //     // Как сделать так, что бы все данные, которыми мы заполним форму, отправить на сервер?\r\n  //     // Подготавливаем данные из формы для отправки на сервер\r\n  //     // FormData - это специальный объект, который позволяет с формы сформировать все данные, которые ввел пользователь. В формате ключ: значение.\r\n  //     const formData = new FormData(form);\r\n  //     // Если данные необходимо отправить в формате JSON\r\n  //     const object = {};\r\n  //     formData.forEach((value, key) => {\r\n  //       object[key] = value;\r\n  //     });\r\n  //     const json = JSON.stringify(object);\r\n  //     // Отправляем данные\r\n  //     // request.send(formData);\r\n  //     // Если данные необходимо отправить в JSON - передаем JSON\r\n  //     request.send(json);\r\n\r\n  //     // Когда данные уйдут на сервер, необходимо будет что то сделать\r\n  //     request.addEventListener('load', () => {\r\n  //       if (request.status === 200) {\r\n  //         console.log(request.response);\r\n  //         showThanksModal(message.success);\r\n  //         // Очищаем поля формы после отправки данных\r\n  //         form.reset();\r\n  //         statusMessage.remove();\r\n  //       } else {\r\n  //         showThanksModal(message.fail);\r\n  //       }\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // // Модальное окно после отправки данных с формы\r\n  // function showThanksModal(message) {\r\n  //   // Находим контент модального окна\r\n  //   const prevModalDialog = document.querySelector('.modal__dialog');\r\n  //   // Открываем модальное окно\r\n  //   // Скрываем его перед тем, как показать модальное окно\r\n  //   prevModalDialog.remove();\r\n  //   openModal();\r\n  //   // Создание нового контента\r\n  //   // Блок-обертка\r\n  //   const thanksModal = document.createElement('div');\r\n  //   thanksModal.classList.add('modal__dialog');\r\n  //   thanksModal.innerHTML = `\r\n  //     <div class=\"modal__content\">\r\n  //       <div class=\"modal__close\" data-close>×</div>\r\n  //       <div class=\"modal__title\">${message}</div>\r\n  //     </div>\r\n  //   `;\r\n  //   document.querySelector('.modal').append(thanksModal);\r\n  //   // Удаляем блок благодарности после его показа через 4 секунды и возвращаем стандартную модалку\r\n  //   setTimeout(() => {\r\n  //     thanksModal.remove();\r\n  //     document.querySelector('.modal').append(prevModalDialog);\r\n  //     closeModal();\r\n  //   }, 3000);\r\n  // }\r\n\r\n  // ........................................\r\n\r\n  // Вариант с fetch api и promise\r\n\r\n  // const forms = document.querySelectorAll('form');\r\n  // const message = {\r\n  //   loading: '../img/form/85. spinner.svg',\r\n  //   success: 'Спасибо, мы скоро свяжемся с вами',\r\n  //   fail: 'Что-то пошло не так!',\r\n  // };\r\n\r\n  // forms.forEach((item) => {\r\n  //   postData(item);\r\n  // });\r\n\r\n  // function postData(form) {\r\n  //   form.addEventListener('submit', (evt) => {\r\n  //     evt.preventDefault();\r\n\r\n  //     const statusMessage = document.createElement('img');\r\n  //     statusMessage.src = message.loading;\r\n  //     statusMessage.style.cssText = `\r\n  //       display: block;\r\n  //       margin: 0 auto;\r\n  //     `;\r\n  //     form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n  //     const formData = new FormData(form);\r\n  //     const object = {};\r\n  //     formData.forEach(function (value, key) {\r\n  //       object[key] = value;\r\n  //     });\r\n\r\n  // Создание промиса и получение инфомрации\r\n  //     fetch('server.php', {\r\n  //       method: 'POST',\r\n  //       headers: {\r\n  //         'Content-type': 'application/json',\r\n  //       },\r\n  //       body: JSON.stringify(object),\r\n  //     })\r\n  //       .then((data) => data.text())\r\n  //       .then((data) => {\r\n  //         console.log(data);\r\n  //         showThanksModal(message.success);\r\n  //         statusMessage.remove();\r\n  //       })\r\n  //       .catch(() => {\r\n  //         showThanksModal(message.fail);\r\n  //       })\r\n  //       .finally(() => {\r\n  //         form.reset();\r\n  //       });\r\n  //   });\r\n  // }\r\n\r\n  // function showThanksModal(message) {\r\n  //   const prevModalDialog = document.querySelector('.modal__dialog');\r\n  //   prevModalDialog.remove();\r\n  //   openModal();\r\n  //   const thanksModal = document.createElement('div');\r\n  //   thanksModal.classList.add('modal__dialog');\r\n  //   thanksModal.innerHTML = `\r\n  //     <div class=\"modal__content\">\r\n  //       <div class=\"modal__close\" data-close>×</div>\r\n  //       <div class=\"modal__title\">${message}</div>\r\n  //     </div>\r\n  //   `;\r\n  //   document.querySelector('.modal').append(thanksModal);\r\n  //   setTimeout(() => {\r\n  //     thanksModal.remove();\r\n  //     document.querySelector('.modal').append(prevModalDialog);\r\n  //     closeModal();\r\n  //   }, 3000);\r\n  // }\r\n\r\n  // ........................................\r\n\r\n  // Вариант с async/await\r\n\r\n  const forms = document.querySelectorAll(formSelector);\r\n  const message = {\r\n    loading: '../img/form/85. spinner.svg',\r\n    success: 'Спасибо, мы скоро свяжемся с вами',\r\n    fail: 'Что-то пошло не так!',\r\n  };\r\n\r\n  forms.forEach((item) => {\r\n    bindPostData(item);\r\n  });\r\n\r\n  function bindPostData(form) {\r\n    form.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n\r\n      const statusMessage = document.createElement('img');\r\n      statusMessage.src = message.loading;\r\n      statusMessage.style.cssText = `\r\n        display: block;\r\n        margin: 0 auto;\r\n      `;\r\n      form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n      const formData = new FormData(form);\r\n\r\n      // Данные с формы (данные из спец. объекта formData помещам в массив массивов, потом переделываем в объект, потом объект переделываем в json)\r\n      const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n      postData('http://localhost:3000/requests', json)\r\n        .then((data) => {\r\n          console.log(data);\r\n          showThanksModal(message.success);\r\n          statusMessage.remove();\r\n        })\r\n        .catch(() => {\r\n          showThanksModal(message.fail);\r\n        })\r\n        .finally(() => {\r\n          form.reset();\r\n        });\r\n    });\r\n  }\r\n\r\n  function showThanksModal(message) {\r\n    const prevModalDialog = document.querySelector('.modal__dialog');\r\n    prevModalDialog.remove();\r\n    openModal('.modal', modalTimerId);\r\n    const thanksModal = document.createElement('div');\r\n    thanksModal.classList.add('modal__dialog');\r\n    thanksModal.innerHTML = `\r\n      <div class=\"modal__content\">\r\n        <div class=\"modal__close\" data-close>×</div>\r\n        <div class=\"modal__title\">${message}</div>\r\n      </div>\r\n    `;\r\n    document.querySelector('.modal').append(thanksModal);\r\n    setTimeout(() => {\r\n      thanksModal.remove();\r\n      document.querySelector('.modal').append(prevModalDialog);\r\n      closeModal('.modal');\r\n    }, 3000);\r\n  }\r\n\r\n  // fetch(''https://jsonplaceholder.typicode.com/todos)\r\n  //  .then(response => response.json()) <=== Это Promise\r\n  //  .then(json => console.log(json))\r\n  // ..................................................\r\n}\r\n\r\nexport default forms;\r\n","// Создание функции для общения с сервером + применение ASYNC/AWAIT\r\n// async ставится перед функцией (так мы ей говорим, что там будет асинхронный код)\r\n// await ставится перед теми операциями, которые нам необходимо дождаться\r\nconst postData = async (url, data) => {\r\n  // Создание Promise\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-type': 'application/json',\r\n    },\r\n    body: data,\r\n  });\r\n  // Возвращаем Promise\r\n  return await res.json();\r\n};\r\n\r\n// Функция для получения карточек с сервера\r\nconst getResource = async (url) => {\r\n  // Создание Promise\r\n  const res = await fetch(url);\r\n  // Руками обозначаем ошибки, при которых будет срабатывать reject\r\n  // .ok - мы что то получили, все ок. Или не ок\r\n  if (!res.ok) {\r\n    // throw - выкидывает ошибку\r\n    // Создание объекта ошибки\r\n    // status - мы попадаем на статус, который вернули (200, 404)\r\n    throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n  }\r\n  // Возвращаем Promise\r\n  return await res.json();\r\n};\r\n\r\nexport { postData };\r\nexport { getResource };\r\n","function calc() {\r\n  // Калькулятор каллорий\r\n\r\n  // Куда выводится подсчет каллорий\r\n  const resultCalories = document.querySelector('.calculating__result span');\r\n\r\n  // Переменные для элементов из калькурятора\r\n  let sex, height, weight, age, ratio;\r\n\r\n  // Если при заходе на сайт в localStorage записан пол, то есть мы уже когда то выбрали, то присваеваем переменной sex это значение\r\n  if (localStorage.getItem('sex')) {\r\n    sex = localStorage.getItem('sex');\r\n  } else {\r\n    // Если в localStorage ничего нет, записываем пол по умолчанию, и записываем в localStorage это значение\r\n    sex = 'female;';\r\n    localStorage.setItem('sex', 'female');\r\n  }\r\n\r\n  // Если при заходе на сайт в localStorage записана активность, то есть мы уже когда то выбрали, то присваеваем переменной ratio это значение\r\n  if (localStorage.getItem('ratio')) {\r\n    ratio = localStorage.getItem('ratio');\r\n  } else {\r\n    // Если в localStorage ничего нет, записываем активность по умолчанию, и записываем в localStorage это значение\r\n    ratio = 1.375;\r\n    localStorage.setItem('ratio', 1.375);\r\n  }\r\n\r\n  // Функция для проверки записаных элементов в localStorage и присваиванию им активного класса при заходе на сайт\r\n  function initLocalSettings(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    // Функция используется либо на дивах с выбором пола, либо на дивах с выбором активности\r\n\r\n    // Убираем активный класс у всех элементов\r\n    elements.forEach((element) => {\r\n      element.classList.remove(activeClass);\r\n      // Если у элемента пол совпадает со значением в localStorage - даем ему активный класс\r\n      if (element.getAttribute('id') === localStorage.getItem('sex')) {\r\n        element.classList.add(activeClass);\r\n      }\r\n\r\n      // Если у элемента активности значение совпадает со значением в localStorage - даем ему активный класс\r\n      if (\r\n        element.getAttribute('data-ratio') === localStorage.getItem('ratio')\r\n      ) {\r\n        element.classList.add(activeClass);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Вызываем функцию для кнопок с выбором пола\r\n  initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n  // Вызываем функцию для кнопок активности\r\n  initLocalSettings(\r\n    '.calculating__choose_big div',\r\n    'calculating__choose-item_active'\r\n  );\r\n\r\n  // Функция для рассчета каллорий по формуле\r\n  function calculatedTotal() {\r\n    // Если хотя бы один элемент калькулятора не выбран или не заполнен - выводим прочерк и прерываем функцию\r\n    if (!sex || !height || !weight || !age || !ratio) {\r\n      resultCalories.textContent = '---';\r\n      return;\r\n    }\r\n\r\n    // Если пол женский - рассчитываем по формуле для женщин\r\n    if (sex === 'female') {\r\n      resultCalories.textContent = Math.round(\r\n        (447.6 + 9.2 * weight + 3.1 * height - 4.3 * age) * ratio\r\n      );\r\n    } else {\r\n      // Если пол мужской\r\n      resultCalories.textContent = Math.round(\r\n        (88.36 + 13.4 * weight + 4.8 * height - 5.7 * age) * ratio\r\n      );\r\n    }\r\n  }\r\n\r\n  calculatedTotal();\r\n\r\n  // Функция для получения статических данных с формы (дивов/кнопок)\r\n  function getStaticInformation(selector, activeClass) {\r\n    // Находим элементы со страницы\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach((element) => {\r\n      element.addEventListener('click', (evt) => {\r\n        // Если мы кликаем по элементам, которые имеют атрибут data-ratio - то работаем с элементами суточной активности\r\n        if (evt.target.getAttribute('data-ratio')) {\r\n          // Записываем в переменную ratio тот коэффициент активности из data-атрибута, который привязан к опроделенному элементу суточной активности\r\n          ratio = +evt.target.getAttribute('data-ratio');\r\n          // Записываем выбранные параметры в localStorage\r\n          localStorage.setItem('ratio', +evt.target.getAttribute('data-ratio'));\r\n        } else {\r\n          // Если мы работаем с полом - при клике получаем его id (мужчина или женщина)\r\n          sex = evt.target.getAttribute('id');\r\n          // Записываем выбранные параметры в localStorage\r\n          localStorage.setItem('sex', evt.target.getAttribute('id'));\r\n        }\r\n        elements.forEach((el) => {\r\n          // Работа с активным классом - убираем активный класс у всех элементов\r\n          el.classList.remove(activeClass);\r\n        });\r\n        // Добавляем активный класс элементу, на который кликнули\r\n        evt.target.classList.add(activeClass);\r\n        // Запускаем функцию подсчета каллорий исходя из выбранных элементов и при изменении какого-то значения\r\n        calculatedTotal();\r\n      });\r\n    });\r\n  }\r\n\r\n  // Вызываем функцию для кнопок с выбором пола\r\n  getStaticInformation('#gender div', 'calculating__choose-item_active');\r\n  // Вызываем функцию для кнопок активности\r\n  getStaticInformation(\r\n    '.calculating__choose_big div',\r\n    'calculating__choose-item_active'\r\n  );\r\n\r\n  // Функция для обработки инпутов в калькуляторе где мы вводим значения\r\n  function getDynamicInformation(selector) {\r\n    // Получаем нужный инпут\r\n    const input = document.querySelector(selector);\r\n\r\n    // Навешимаем обработчик на инпут\r\n    input.addEventListener('input', () => {\r\n      // Если пользователь ввел не число - инпут подветится красным\r\n      if (input.value.match(/\\D/g)) {\r\n        input.style.border = '1px solid red';\r\n      } else {\r\n        input.style.border = 'none';\r\n      }\r\n      // Проверяем что это за инпут (рост, вес, возраст) и вписываем туда значение, которые ввели в инпут\r\n      switch (input.getAttribute('id')) {\r\n        case 'height':\r\n          height = +input.value;\r\n          break;\r\n        case 'weight':\r\n          weight = +input.value;\r\n          break;\r\n        case 'age':\r\n          age = +input.value;\r\n          break;\r\n      }\r\n      // При изменениии какого то значения вызываем функцию подсчета каллорий по формуле\r\n      calculatedTotal();\r\n    });\r\n  }\r\n\r\n  // Вызываем функцию для каждого инпута\r\n  getDynamicInformation('#height');\r\n  getDynamicInformation('#weight');\r\n  getDynamicInformation('#age');\r\n}\r\n\r\nexport default calc;\r\n"],"names":["openModal","modalSelector","modalTimerId","modal","document","querySelector","classList","add","remove","body","style","overflow","clearInterval","closeModal","window","addEventListener","setTimeout","triggerSelector","modalTrigger","querySelectorAll","forEach","btn","evt","target","className","code","contains","showModalByScroll","pageYOffset","documentElement","clientHeight","scrollHeight","removeEventListener","tabsSelector","tabsContentSelector","tabsItemSelector","activeClass","tabsWrapper","tabContent","tabItems","hideTabContent","item","showTabContent","i","arguments","length","undefined","slice","tabs","id","deadline","getZero","num","selector","endtime","timer","days","hours","minutes","seconds","timeInterval","setInterval","updateClock","t","Date","parse","Math","floor","total","getTimeRemaining","innerHTML","setClock","MenuCard","constructor","img","alt","title","descr","price","parentSelector","this","_len","classes","Array","_key","transfer","changeMoney","render","card","createElement","append","axios","get","then","data","_ref","cards","container","slide","prevArrow","nextArrow","totalCounter","currentCounter","wrapper","field","slides","slider","prevSlideBtn","nextSlideBtn","currentSlideNum","totalSlidesNum","slideCurrentIndex","slidesWrapper","slidesField","widthWindowSlide","getComputedStyle","width","offset","textContent","display","transition","position","carouselIndicators","dots","dot","setAttribute","opacity","push","indexCurrnetsSlide","styleOpacityDots","deleteNotDigits","str","replace","transform","e","slideTo","getAttribute","formSelector","showThanksModal","message","prevModalDialog","thanksModal","form","preventDefault","statusMessage","src","cssText","insertAdjacentElement","formData","FormData","async","url","res","fetch","method","headers","json","postData","JSON","stringify","Object","fromEntries","entries","console","log","catch","finally","reset","forms","resultCalories","sex","height","weight","age","ratio","initLocalSettings","element","localStorage","getItem","calculatedTotal","round","getStaticInformation","elements","setItem","el","getDynamicInformation","input","value","match","border","calc"],"sourceRoot":""}